type = "directrequest"
schemaVersion = 1
name = "Get Flex Data Request"
maxTaskDuration = "30s"
contractAddress = "0x364AAB5aBd6C0B42f9Ba347dF024B67Cc6a4a882"
observationSource = """
    decode_log  [type="ethabidecodelog"
                 abi="OracleRequest(bytes32 indexed specId, address requester, bytes32 requestId, uint256 payment, address callbackAddr, bytes4 callbackFunctionId, uint256 cancelExpiration, uint256 dataVersion, bytes data)"
                 data="$(jobRun.logData)"
                 topics="$(jobRun.logTopics)"]
    decode_cbor [type=cborparse data="$(decode_log.data)"]
    query_data  [type="bridge"
                 name="get_query_data_from_cid"
                 timeout="30s"
                 requestData="{\\"data\\": { \\"cid\\": $(decode_cbor.cid)}}"
                ]
    query_parse [type="jsonparse"
                 path="data,query"
                 data="$(query_data)"]
    data        [type="bridge"
                 name="get_onchain_data_return_cid"
                 timeout="30s"
                 requestData="{\\"data\\": { \\"query\\": $(decode_cbor.cid), \\"account\\": $(decode_cbor.account)}}"
                ]
    data_parse  [type="jsonparse"
                 path="data,cid"
                 data="$(query_data)"]
    encode_data [type="ethabiencode" abi="(bytes32 requestId, string value)" data="{\\"requestId\\": $(decode_log.requestId), \\"value\\": $(data_parse)}"]
    encode_tx   [type="ethabiencode"
                 abi="fulfillOracleRequest2(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes calldata data)"
                 data="{\\"requestId\\": $(decode_log.requestId), \\"payment\\": $(decode_log.payment), \\"callbackAddress\\": $(decode_log.callbackAddr), \\"callbackFunctionId\\": $(decode_log.callbackFunctionId), \\"expiration\\": $(decode_log.cancelExpiration), \\"data\\": $(encode_data)}"
                ]
    submit_tx   [type="ethtx" to="0x364AAB5aBd6C0B42f9Ba347dF024B67Cc6a4a882" data="$(encode_tx)"]
  	decode_log -> decode_cbor -> query_data -> query_parse -> data -> data_parse ->encode_data -> encode_tx -> submit_tx 
"""