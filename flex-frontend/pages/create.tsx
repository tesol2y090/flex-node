import Head from "next/head"
import { useRouter } from "next/router"
import {
  Container,
  Divider,
  Stack,
  Input,
  FormControl,
  FormLabel,
  Select,
  Textarea,
  Button,
  useToast,
} from "@chakra-ui/react"
import { useState } from "react"
import { useAccount, useNetwork } from "wagmi"
import { encode } from "js-base64"
import { Web3Storage, File } from "web3.storage"
import { v4 as uuidv4 } from "uuid"

import Header from "../components/create/header"
import { QueryData } from "../types"
import { addQueryData } from "../firebase/queryData"

export default function Create() {
  const toast = useToast()
  const router = useRouter()
  const { address } = useAccount()
  const { chain: addressChain } = useNetwork()
  const [queryName, setQueryName] = useState<string>("")
  const [description, setDescription] = useState<string>("")
  const [category, setCategory] = useState<string>("")
  const [protocolChain, setProtocolChain] = useState<string>("")
  const [protocolName, setProtocolName] = useState<string>("")
  const [endpoint, setEndpoint] = useState<string>("")
  const [query, setQuery] = useState<string>("")
  const [isLoading, setIsLoading] = useState<boolean>(false)

  const onSubmit = async () => {
    setIsLoading(true)
    const storage = new Web3Storage({
      token: process.env.NEXT_PUBLIC_WEB3_STORAGE_API_KEY || "",
    })

    try {
      const id = uuidv4()
      const base64Query = encode(query)

      const queryPayload = {
        id,
        queryName,
        endpoint,
        query: base64Query,
        creator: address,
      }

      const buffer = Buffer.from(JSON.stringify(queryPayload))
      const dataFile = [new File([buffer], `${id}.json`)]
      const cid = await storage.put(dataFile)

      const payload: QueryData = {
        id,
        queryName,
        description,
        protocolName: protocolName,
        protocolChain: protocolChain,
        category,
        endpoint,
        query: base64Query,
        cid,
        creator: address,
        chain: addressChain?.name,
      }

      await addQueryData(payload)

      setQueryName("")
      setDescription("")
      setProtocolChain("")
      setCategory("")
      setEndpoint("")
      setQuery("")
      toast({
        title: `Create Query Sucessfull`,
        status: "success",
        isClosable: true,
        position: "top-right",
      })
      router.push(`/query/${id}`)
    } catch (error) {
      console.log(error)
      toast({
        title: `Can not create query`,
        status: "error",
        isClosable: true,
        position: "top-right",
      })
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div>
      <Head>
        <title>Flex Node - Explore</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container
        minWidth="100vw"
        display="flex"
        alignItems="center"
        flexDirection="column"
      >
        <Header />
        <Divider width="80%" my="5" />
        <Stack width="80%" gap="2">
          <FormControl>
            <FormLabel fontWeight="bold">Query Name</FormLabel>
            <Input
              value={queryName}
              type="text"
              onChange={(e) => setQueryName(e.target.value)}
            />
          </FormControl>
          <FormControl fontWeight="bold">
            <FormLabel fontWeight="bold">Description</FormLabel>
            <Input
              value={description}
              type="text"
              onChange={(e) => setDescription(e.target.value)}
            />
          </FormControl>
          <FormControl>
            <FormLabel fontWeight="bold">Category</FormLabel>
            <Select
              value={category}
              onChange={(e) => setCategory(e.target.value)}
              placeholder="Select Category"
            >
              <option value="Defi">Defi</option>
              <option value="NFT">NFT</option>
              <option value="Social">Social</option>
              <option value="Insurance">Insurance</option>
            </Select>
          </FormControl>
          <FormControl>
            <FormLabel fontWeight="bold">Protocol Chain</FormLabel>
            <Select
              value={protocolChain}
              onChange={(e) => setProtocolChain(e.target.value)}
              placeholder="Select Protocol Chain"
            >
              <option value="Ethereum">Ethereum</option>
              <option value="Polygon">Polygon</option>
              <option value="Avalanche">Avalanche</option>
              <option value="Optimism">Optimism</option>
              <option value="Arbitrum">Arbitrum</option>
            </Select>
          </FormControl>
          <FormControl>
            <FormLabel fontWeight="bold">Protocol Name</FormLabel>
            <Input
              value={protocolName}
              type="text"
              onChange={(e) => setProtocolName(e.target.value)}
            />
          </FormControl>
          <FormControl>
            <FormLabel fontWeight="bold">Endpoint</FormLabel>
            <Input
              value={endpoint}
              type="text"
              onChange={(e) => setEndpoint(e.target.value)}
            />
          </FormControl>
          <FormControl>
            <FormLabel fontWeight="bold">Query Command</FormLabel>
            <Textarea
              value={query}
              rows={12}
              onChange={(e) => setQuery(e.target.value)}
            />
          </FormControl>
          <FormControl>
            <FormLabel fontWeight="bold">Chain</FormLabel>
            <Input readOnly value={addressChain?.name} type="text" />
          </FormControl>
          <FormControl>
            <FormLabel fontWeight="bold">Creator</FormLabel>
            <Input readOnly value={address} type="text" />
          </FormControl>
          <Button
            bgGradient="linear-gradient(90deg, #3894A3 -19.81%, #A661FF 105.58%);"
            _hover={{ opacity: "83%" }}
            color="#fff"
            isLoading={isLoading}
            loadingText="Creating..."
            type="submit"
            onClick={onSubmit}
          >
            Create
          </Button>
        </Stack>
      </Container>
    </div>
  )
}
